// This is Prisma schema file for MedLaby: https://medlaby.com
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// ========== ENUMS ==========
enum SubscriptionPlan {
    STARTER
    GROWTH
    ENTERPRISE
    ONE_TIME
}

enum SubscriptionStatus {
    ACTIVE
    TRIAL
    CANCELED
    EXPIRED
}

// ========== LAB USER ROLES ==========
enum Role {
    OWNER
    ADMIN
    STAFF
    VIEWER
}

enum UserTitle {
    MR
    MRS
    MS
    DR
    PROF
}

enum UserStatus {
    ACTIVE
    INACTIVE
    PENDING
    DELETED
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum TenantStatus {
    ACTIVE
    INACTIVE
    PENDING
    DELETED
}

enum DoctorStatus {
    ACTIVE
    INACTIVE
}

enum BloodGroup {
    A_POSITIVE
    A_NEGATIVE
    B_POSITIVE
    B_NEGATIVE
    AB_POSITIVE
    AB_NEGATIVE
    O_POSITIVE
    O_NEGATIVE
}

enum CustomerType {
    REFERRED
    SELF
    OTHER
}

enum MaritalStatus {
    SINGLE
    MARRIED
    DIVORCED
    WIDOWED
    SEPARATED
    OTHER
}

enum ReportStatus {
    PENDING
    PROCESSING
    COMPLETED
    DELIVERED
}

enum ReportChangeLogAction {
    CREATED
    UPDATED
    APPROVED
    REJECTED
}

enum PaymentType {
    CASH
    UPI
}

enum PaymentMethod {
    CASH
    BANK_TRANSFER
    UPI
}

enum PaymentStatus {
    PENDING
    PAID
    FAILED
}

enum InvoiceStatus {
    PAID
    UNPAID
    PARTIAL
    CANCELLED
}

enum DoctorCommissionStatus {
    PENDING
    PAID
    FAILED
}

enum SyncOperation {
    CREATE
    UPDATE
    DELETE
}

enum SyncStatus {
    PENDING
    SYNCED
    FAILED
    CONFLICT
    RESOLVED
    PROCESSING
}

enum AuditLogAction {
    CREATED
    UPDATED
    DELETED
    VIEWED
    APPROVED
}

// ========== SHARED MODELS ==========
model AppConfig {
    id             String   @id @default(cuid())
    appName        String
    appVersion     String
    appLogo        String?
    appIcon        String?
    appBanner      String?
    appDescription String?
    appKeywords    String?
    appAuthor      String?
    appAuthorEmail String?
    appAuthorUrl   String?
    appCopyright   String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @default(now()) @updatedAt
}

model AppSetting {
    id        String            @id @default(cuid())
    key       String
    value     String
    createdAt DateTime          @default(now())
    updatedAt DateTime          @default(now()) @updatedAt
    deletedAt DateTime?
    values    AppSettingValue[]
}

model AppSettingValue {
    id        String     @id @default(cuid())
    settingId String
    value     String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @default(now()) @updatedAt
    deletedAt DateTime?
    setting   AppSetting @relation(fields: [settingId], references: [id])

    @@index([settingId])
}

model Page {
    id           String        @id @default(cuid())
    name         String
    slug         String        @unique
    content      Json
    isActive     Boolean       @default(true)
    metaData     Json?
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @default(now()) @updatedAt
    deletedAt    DateTime?
    pageContents PageContent[]
}

model PageContent {
    id        String    @id @default(cuid())
    section   String
    content   Json
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    deletedAt DateTime?
    pageId    String?
    Page      Page?     @relation(fields: [pageId], references: [id])

    @@index([section])
}

model Post {
    id        String    @id @default(cuid())
    title     String
    slug      String    @unique
    metaData  Json?
    content   Json
    isActive  Boolean   @default(true)
    userId    String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    deletedAt DateTime?
    User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([slug])
}

model Notification {
    id        String    @id @default(cuid())
    tenantId  String
    userId    String?
    type      String
    title     String
    message   String
    isRead    Boolean   @default(false)
    metadata  Json?
    createdAt DateTime  @default(now())
    readAt    DateTime?
    tenant    Tenant    @relation(fields: [tenantId], references: [id])
    user      User?     @relation(fields: [userId], references: [id])
}

// ========== SHARED ADDRESS MODEL ==========
model Address {
    id                String            @id @default(cuid())
    line1             String
    line2             String?
    city              String
    state             String
    zip               String
    country           String            @default("India")
    createdAt         DateTime          @default(now())
    customerAddresses CustomerAddress[]
    doctorAddresses   DoctorAddress[]
    tenantAddresses   TenantAddress[]
    userAddresses     UserAddress[]
}

// ========== SYSTEM ROLE TEMPLATES ==========
model SystemRoleTemplate {
    id          String             @id @default(cuid())
    role        Role               @default(STAFF)
    name        String             @unique
    description String?
    isDefault   Boolean            @default(false)
    permissions SystemPermission[]
    tenantRoles TenantRole[]

    @@index([isDefault])
}

model SystemPermission {
    id             String             @id @default(cuid())
    action         String
    resource       String
    conditions     Json?
    roleTemplateId String
    roleTemplate   SystemRoleTemplate @relation(fields: [roleTemplateId], references: [id], onDelete: Cascade)

    @@unique([roleTemplateId, action, resource])
}

// ========== TENANT / LAB ==========
model Tenant {
    id                   String                 @id @default(cuid())
    name                 String
    slug                 String                 @unique
    labLicenseNumber     String?                @unique
    contactEmail         String                 @unique
    contactPhone         String?                @unique
    gstin                String?                @unique
    isActive             Boolean                @default(true)
    createdAt            DateTime               @default(now())
    updatedAt            DateTime               @default(now()) @updatedAt
    deletedAt            DateTime?
    canManageRoles       Boolean                @default(true)
    maxCustomRoles       Int                    @default(3)
    maxUsers             Int                    @default(5)
    auditLogs            AuditLog[]
    Customer             Customer[]
    Doctor               Doctor[]
    Notification         Notification[]
    Report               Report[]
    ReportInvoice        ReportInvoice[]
    ReportInvoicePayment ReportInvoicePayment[]
    ReportTemplate       ReportTemplate[]
    Service              Service[]
    ServiceCategory      ServiceCategory[]
    subscriptions        Subscription[]
    SyncLog              SyncLog[]
    tenantAddresses      TenantAddress[]
    Roles                TenantRole[]
    users                TenantUser[]

    @@index([slug])
    @@index([isActive])
    @@index([createdAt])
    @@index([deletedAt])
}

model TenantAddress {
    id        String   @id @default(cuid())
    tenantId  String
    addressId String
    isPrimary Boolean  @default(true)
    createdAt DateTime @default(now())
    Report    Report[]
    address   Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
    tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

    @@unique([tenantId, addressId])
    @@index([tenantId])
    @@index([addressId])
}

// ========== USERS ==========
model User {
    id                   String            @id @default(cuid())
    name                 String?
    email                String            @unique
    image                String?
    createdAt            DateTime          @default(now())
    dateOfBirth          DateTime?
    deletedAt            DateTime?
    isSuperAdmin         Boolean           @default(false)
    passwordHash         String?
    phone                String?
    status               UserStatus        @default(ACTIVE)
    updatedAt            DateTime          @default(now()) @updatedAt
    userTitle            UserTitle         @default(MR)
    passwordResetExpires DateTime?
    passwordResetToken   String?           @unique
    accounts             Account[]
    auditLogs            AuditLog[]
    Notification         Notification[]
    posts                Post[]
    ReportChangeLog      ReportChangeLog[]
    sessions             Session[]
    tenants              TenantUser[]
    userAddresses        UserAddress[]

    @@index([email])
    @@index([status])
    @@index([createdAt])
    @@index([deletedAt])
}

model UserAddress {
    id        String   @id @default(cuid())
    userId    String
    addressId String
    isPrimary Boolean  @default(true)
    createdAt DateTime @default(now())
    address   Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, addressId])
    @@index([userId])
    @@index([addressId])
}

model TenantRole {
    id                   String              @id @default(cuid())
    name                 String
    description          String?
    isSystem             Boolean             @default(false)
    createdAt            DateTime            @default(now())
    updatedAt            DateTime            @default(now()) @updatedAt
    systemRoleTemplateId String?
    tenantId             String
    permissions          TenantPermission[]
    systemRoleTemplate   SystemRoleTemplate? @relation(fields: [systemRoleTemplateId], references: [id], onDelete: Cascade)
    tenant               Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)
    TenantUserRole       TenantUserRole[]

    @@unique([tenantId, name])
    @@index([tenantId])
    @@index([isSystem])
}

model TenantPermission {
    id       String     @id @default(cuid())
    action   String
    resource String
    roleId   String
    role     TenantRole @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@unique([roleId, action, resource])
    @@index([action])
    @@index([resource])
}

model TenantUserRole {
    id           String     @id @default(cuid())
    createdAt    DateTime   @default(now())
    tenantUserId String
    roleId       String
    role         TenantRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
    tenantUser   TenantUser @relation(fields: [tenantUserId], references: [id], onDelete: Cascade)

    @@unique([tenantUserId, roleId])
    @@index([tenantUserId])
    @@index([roleId])
}

model TenantUser {
    id            String            @id @default(cuid())
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @default(now()) @updatedAt
    deletedAt     DateTime?
    userId        String
    tenantId      String
    collectedBy   Report[]          @relation("SampleCollectedBy")
    Report        Report[]          @relation("ReportCreatedBy")
    reportUpdates ReportChangeLog[] @relation("ReportChangedByTenantUser")
    tenant        Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
    user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    tenantRoles   TenantUserRole[]

    @@unique([userId, tenantId])
    @@index([userId])
    @@index([tenantId])
    @@index([createdAt])
}

// ========== SUBSCRIPTION / BILLING ==========
model Subscription {
    id          String             @id @default(cuid())
    plan        SubscriptionPlan   @default(STARTER)
    status      SubscriptionStatus @default(ACTIVE)
    startDate   DateTime           @default(now())
    endDate     DateTime?
    renewalDate DateTime?
    createdAt   DateTime           @default(now())
    stripeId    String?
    tenantId    String
    tenant      Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)

    @@index([tenantId])
    @@index([status])
    @@index([startDate])
    @@index([plan, status])
}

// ========== AUDIT LOG ==========
model AuditLog {
    id        String         @id @default(cuid())
    metadata  Json?
    createdAt DateTime       @default(now())
    tenantId  String
    userId    String?
    entity    String?
    entityId  String?
    ipAddress String?
    userAgent String?
    action    AuditLogAction @default(CREATED)
    tenant    Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
    user      User?          @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([tenantId])
    @@index([action])
    @@index([createdAt])
    @@index([tenantId, action])
    @@index([tenantId, createdAt])
}

// ========== NEXTAUTH MODELS ==========
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([expires])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@index([expires])
}

model SyncLog {
    id        String        @id @default(cuid())
    tenantId  String
    entity    String
    entityId  String
    status    SyncStatus    @default(PENDING)
    operation SyncOperation @default(UPDATE)
    syncedAt  DateTime      @default(now())
    details   Json?
    startedAt DateTime      @default(now())
    tenant    Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

    @@index([tenantId])
    @@index([entity])
    @@index([syncedAt])
    @@index([tenantId, entity])
}

// ========== SERVICES MANAGEMENT ==========
model ServiceCategory {
    id        String    @id @default(cuid())
    createdAt DateTime  @default(now())
    updatedAt DateTime  @default(now()) @updatedAt
    deletedAt DateTime?
    name      String
    slug      String    @unique
    tenantId  String
    services  Service[]
    tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

    @@index([tenantId])
    @@index([slug])
    @@index([deletedAt])
}

model Service {
    id                String              @id @default(cuid())
    name              String
    code              String?             @unique
    description       String?
    price             Float
    isActive          Boolean             @default(true)
    createdAt         DateTime            @default(now())
    updatedAt         DateTime            @default(now()) @updatedAt
    deletedAt         DateTime?
    tenantId          String
    categoryId        String?
    ReportDetail      ReportDetail[]
    ReportInvoice     ReportInvoice[]
    ReportInvoiceItem ReportInvoiceItem[]
    ReportTemplate    ReportTemplate[]
    Category          ServiceCategory?    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    Tenant            Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade)

    @@index([tenantId])
    @@index([categoryId])
    @@index([code])
    @@index([isActive])
    @@index([price])
}

// ========== CUSTOMER MANAGEMENT ==========
model Customer {
    id                String            @id @default(cuid())
    title             UserTitle?        @default(MR)
    name              String
    email             String?
    phone             String?
    dateOfBirth       DateTime?
    gender            Gender?
    bloodGroup        BloodGroup?
    maritalStatus     MaritalStatus?
    aadharNumber      String?           @unique
    panNumber         String?           @unique
    passportNumber    String?           @unique
    knownAllergies    String[]
    chronicConditions String[]
    medications       String[]
    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @default(now()) @updatedAt
    deletedAt         DateTime?
    tenantId          String
    tenant            Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
    customerAddresses CustomerAddress[]
    Report            Report[]
    ReportInvoice     ReportInvoice[]

    @@index([tenantId])
    @@index([email])
    @@index([phone])
    @@index([name])
    @@index([deletedAt])
}

model CustomerAddress {
    id         String   @id @default(cuid())
    customerId String
    addressId  String
    isPrimary  Boolean  @default(true)
    createdAt  DateTime @default(now())
    address    Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
    customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
    Report     Report[]

    @@unique([customerId, addressId])
    @@index([customerId])
    @@index([addressId])
}

// ========== DOCTOR MANAGEMENT ==========
model Doctor {
    id                  String                    @id @default(cuid())
    name                String
    specialization      String?
    email               String?
    phone               String?
    registrationNo      String?
    clinicName          String?
    department          String?
    status              DoctorStatus              @default(ACTIVE)
    createdAt           DateTime                  @default(now())
    updatedAt           DateTime                  @default(now()) @updatedAt
    deletedAt           DateTime?
    tenantId            String
    tenant              Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
    doctorAddresses     DoctorAddress[]
    doctorCommissions   DoctorCommission[]
    DoctorCommissionLog DoctorCommissionLog[]
    doctorPayments      DoctorCommissionPayment[]
    Report              Report[]
    ReportInvoice       ReportInvoice[]

    @@index([tenantId])
    @@index([email])
    @@index([phone])
    @@index([registrationNo])
    @@index([specialization])
}

model DoctorAddress {
    id        String    @id @default(cuid())
    doctorId  String
    addressId String
    isPrimary Boolean   @default(true)
    createdAt DateTime  @default(now())
    deletedAt DateTime?
    address   Address   @relation(fields: [addressId], references: [id], onDelete: Cascade)
    doctor    Doctor    @relation(fields: [doctorId], references: [id], onDelete: Cascade)

    @@unique([doctorId, addressId])
    @@index([doctorId])
    @@index([addressId])
}

model DoctorCommission {
    id                  String                @id @default(cuid())
    commissionType      String
    value               Float
    isActive            Boolean               @default(true)
    notes               String?
    createdAt           DateTime              @default(now())
    updatedAt           DateTime              @default(now()) @updatedAt
    deletedAt           DateTime?
    doctorId            String
    doctor              Doctor                @relation(fields: [doctorId], references: [id], onDelete: Cascade)
    DoctorCommissionLog DoctorCommissionLog[]

    @@index([doctorId])
    @@index([isActive])
    @@index([commissionType])
    @@index([value])
}

model DoctorCommissionLog {
    id               String                 @id @default(cuid())
    doctorId         String
    invoiceId        String?
    commissionId     String
    createdAt        DateTime               @default(now())
    updatedAt        DateTime               @default(now()) @updatedAt
    commissionAmt    Float
    commissionStatus DoctorCommissionStatus @default(PENDING)
    reportDetailId   String?
    commission       DoctorCommission       @relation(fields: [commissionId], references: [id], onDelete: Cascade)
    doctor           Doctor                 @relation(fields: [doctorId], references: [id], onDelete: Cascade)
    invoice          ReportInvoice?         @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    reportDetail     ReportDetail?          @relation(fields: [reportDetailId], references: [id], onDelete: Cascade)

    @@index([doctorId])
    @@index([invoiceId])
    @@index([commissionId])
    @@index([createdAt])
    @@index([updatedAt])
}

model DoctorCommissionPayment {
    id            String        @id @default(cuid())
    amount        Float
    paymentDate   DateTime      @default(now())
    paymentMethod PaymentMethod
    referenceNo   String?
    status        PaymentStatus @default(PENDING)
    notes         String?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @default(now()) @updatedAt
    deletedAt     DateTime?
    doctorId      String
    doctor        Doctor        @relation(fields: [doctorId], references: [id], onDelete: Cascade)

    @@index([doctorId])
    @@index([paymentDate])
    @@index([status])
    @@index([referenceNo])
    @@index([createdAt])
    @@index([updatedAt])
    @@index([deletedAt])
}

// ========== BILLING ==========
model ReportInvoice {
    id          String                 @id @default(cuid())
    totalAmount Float
    discount    Float                  @default(0)
    netAmount   Float
    paymentType PaymentType
    status      InvoiceStatus          @default(PAID)
    issuedAt    DateTime               @default(now())
    createdAt   DateTime               @default(now())
    updatedAt   DateTime               @default(now()) @updatedAt
    deletedAt   DateTime?
    tenantId    String
    customerId  String
    doctorId    String?
    serviceId   String?
    logs        DoctorCommissionLog[]
    Report      Report[]
    customer    Customer               @relation(fields: [customerId], references: [id], onDelete: Cascade)
    doctor      Doctor?                @relation(fields: [doctorId], references: [id], onDelete: Cascade)
    Service     Service?               @relation(fields: [serviceId], references: [id])
    tenant      Tenant                 @relation(fields: [tenantId], references: [id], onDelete: Cascade)
    items       ReportInvoiceItem[]
    payments    ReportInvoicePayment[]

    @@index([tenantId])
    @@index([customerId])
    @@index([doctorId])
    @@index([issuedAt])
    @@index([status])
    @@index([deletedAt])
}

model ReportInvoiceItem {
    id        String        @id @default(cuid())
    quantity  Int           @default(1)
    price     Float
    discount  Float         @default(0)
    total     Float
    createdAt DateTime      @default(now())
    invoiceId String
    serviceId String
    invoice   ReportInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    service   Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)

    @@index([invoiceId])
    @@index([serviceId])
}

model ReportInvoicePayment {
    id            String        @id @default(cuid())
    amount        Float
    method        PaymentMethod
    status        PaymentStatus @default(PENDING)
    referenceNo   String?
    transactionId String?
    paidAt        DateTime?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @default(now()) @updatedAt
    deletedAt     DateTime?
    invoiceId     String
    tenantId      String
    invoice       ReportInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    tenant        Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

    @@index([invoiceId])
    @@index([tenantId])
    @@index([status])
    @@index([paidAt])
    @@index([referenceNo])
    @@index([transactionId])
    @@index([deletedAt])
}

// ========== REPORT TEMPLATE MANAGEMENT ==========
model ReportTemplate {
    id              String            @id @default(cuid())
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @default(now()) @updatedAt
    deletedAt       DateTime?
    name            String
    notes           String?
    isActive        Boolean           @default(true)
    tenantId        String
    serviceId       String
    reference       String?
    unit            String?
    ReportDetails   ReportDetail[]
    ReportParameter ReportParameter[]
    service         Service           @relation(fields: [serviceId], references: [id], onDelete: Cascade)
    tenant          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)

    @@index([tenantId])
    @@index([serviceId])
    @@index([deletedAt])
}

model ReportParameter {
    id             String         @id @default(cuid())
    name           String
    unit           String?
    method         String?
    turnaroundTime Int?
    isCritical     Boolean        @default(false)
    criticalLow    Float?
    criticalHigh   Float?
    genderSpecific Boolean        @default(false)
    ageSpecific    Boolean        @default(false)
    notes          String?
    referenceMin   Float?
    referenceMax   Float?
    gender         Gender?
    ageMin         Int?
    ageMax         Int?
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @default(now()) @updatedAt
    deletedAt      DateTime?
    templateId     String
    details        ReportDetail[]
    template       ReportTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

    @@index([templateId])
    @@index([name])
    @@index([isCritical])
    @@index([deletedAt])
    @@index([gender])
    @@index([ageMin])
    @@index([ageMax])
    @@index([referenceMin])
    @@index([referenceMax])
    @@index([genderSpecific])
    @@index([ageSpecific])
    @@index([method])
    @@index([turnaroundTime])
    @@index([unit])
    @@index([notes])
}

// ========== REPORTS ==========
model Report {
    id                String            @id @default(cuid())
    reportCode        String?           @unique
    fileUrl           String?
    collectedPlace    String?
    notes             String?
    status            ReportStatus      @default(PENDING)
    customerType      CustomerType?
    issuedAt          DateTime?
    collectedAt       DateTime?
    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @default(now()) @updatedAt
    deletedAt         DateTime?
    version           Int               @default(1)
    tenantId          String
    customerId        String
    doctorId          String?
    invoiceId         String
    createdBy         String?
    collectedBy       String?
    customerAddressId String?
    labAddressId      String?
    collectedByUser   TenantUser?       @relation("SampleCollectedBy", fields: [collectedBy], references: [id])
    createdByUser     TenantUser?       @relation("ReportCreatedBy", fields: [createdBy], references: [id])
    customerAddress   CustomerAddress?  @relation(fields: [customerAddressId], references: [id])
    customer          Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
    doctor            Doctor?           @relation(fields: [doctorId], references: [id], onDelete: Cascade)
    invoice           ReportInvoice     @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    labAddress        TenantAddress?    @relation(fields: [labAddressId], references: [id])
    tenant            Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
    updateLog         ReportChangeLog[]
    details           ReportDetail[]

    @@index([invoiceId])
    @@index([tenantId])
    @@index([doctorId])
    @@index([status])
    @@index([deletedAt])
    @@index([updatedAt])
    @@index([createdBy])
    @@index([collectedBy])
    @@index([customerAddressId])
    @@index([labAddressId])
    @@index([reportCode])
}

model ReportChangeLog {
    id               String                @id @default(cuid())
    reportId         String
    changedById      String
    editVersion      Int
    changes          Json
    timestamp        DateTime              @default(now())
    conflictResolved Boolean               @default(false)
    action           ReportChangeLogAction @default(CREATED)
    userId           String?
    changedBy        TenantUser            @relation("ReportChangedByTenantUser", fields: [changedById], references: [id])
    report           Report                @relation(fields: [reportId], references: [id], onDelete: Cascade)
    User             User?                 @relation(fields: [userId], references: [id])

    @@index([reportId, editVersion])
    @@index([timestamp])
    @@index([changedById])
    @@index([reportId])
}

model ReportDetail {
    id                    String                @id @default(cuid())
    parameterName         String?
    parameterUnit         String?
    parameterReferenceMin Float?
    parameterReferenceMax Float?
    resultText            String?
    resultValue           Float?
    remarks               String?
    createdAt             DateTime              @default(now())
    lastEditedAt          DateTime              @default(now()) @updatedAt
    deletedAt             DateTime?
    reportId              String
    parameterId           String
    serviceId             String?
    amount                Float?
    reportTemplateId      String?
    DoctorCommissionLog   DoctorCommissionLog[]
    parameter             ReportParameter       @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    report                Report                @relation(fields: [reportId], references: [id], onDelete: Cascade)
    ReportTemplate        ReportTemplate?       @relation(fields: [reportTemplateId], references: [id])
    Service               Service?              @relation(fields: [serviceId], references: [id])

    @@index([reportId])
    @@index([lastEditedAt])
    @@index([parameterId])
    @@index([resultValue])
    @@index([deletedAt])
}
