// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// ========== ENUMS ==========
enum SubscriptionPlan {
    STARTER
    GROWTH
    ENTERPRISE
}

enum SubscriptionStatus {
    ACTIVE
    TRIAL
    CANCELED
    EXPIRED
}

// ========== LAB USER ROLES ==========
enum Role {
    OWNER // Full control of lab
    ADMIN // Can manage users, reports, billing
    STAFF // Regular staff (billing, reports, history)
    VIEWER // Limited read-only access
}

enum UserTitle {
    MR
    MRS
    MS
    DR
    PROF
}

enum UserStatus {
    ACTIVE
    INACTIVE
    PENDING
    DELETED
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum TenantStatus {
    ACTIVE
    INACTIVE
    PENDING
    DELETED
}

// ========== TENANT / LAB ==========
model Tenant {
    id           String    @id @default(cuid())
    name         String
    slug         String    @unique // used in URLs, e.g. lab1.booklims.com
    contactEmail String
    contactPhone String?
    address      String?
    city         String?
    state        String?
    zip          String?
    country      String?
    isActive     Boolean   @default(true)
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    deletedAt    DateTime?

    // Relations
    users         TenantUser[]
    subscriptions Subscription[]
    auditLogs     AuditLog[]
}

// ========== USERS ==========
model User {
    id           String     @id @default(cuid())
    userTitle    UserTitle? @default(MR)
    name         String?
    email        String?    @unique
    image        String?
    passwordHash String? // optional if you use email/password login
    isSuperAdmin Boolean    @default(false) // SaaS-level owner/admin
    status       UserStatus @default(ACTIVE)
    dateOfBirth  DateTime?
    phone        String?
    address      String?
    city         String?
    state        String?
    zip          String?
    country      String?
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    deletedAt    DateTime?

    // Relations
    tenants   TenantUser[]
    sessions  Session[]
    accounts  Account[]
    auditLogs AuditLog[]
}

// ========== TENANT USERS ==========
model TenantUser {
    id        String    @id @default(cuid())
    role      Role      @default(STAFF)
    createdAt DateTime  @default(now())
    deletedAt DateTime?

    // Relations
    userId   String
    tenantId String
    user     User   @relation(fields: [userId], references: [id])
    tenant   Tenant @relation(fields: [tenantId], references: [id])
}

// ========== SUBSCRIPTION / BILLING ==========
model Subscription {
    id          String             @id @default(cuid())
    plan        SubscriptionPlan   @default(STARTER)
    status      SubscriptionStatus @default(ACTIVE)
    startDate   DateTime           @default(now())
    endDate     DateTime?
    renewalDate DateTime?
    stripeId    String? // or Razorpay/PayU etc
    createdAt   DateTime           @default(now())

    // Relations
    tenantId String
    tenant   Tenant @relation(fields: [tenantId], references: [id])
}

// ========== AUDIT LOG ==========
model AuditLog {
    id        String   @id @default(cuid())
    action    String // e.g., "USER_CREATED", "BILLING_UPDATED"
    metadata  Json?
    createdAt DateTime @default(now())

    // Relations
    tenantId String
    userId   String?
    tenant   Tenant  @relation(fields: [tenantId], references: [id])
    user     User?   @relation(fields: [userId], references: [id])
}

// ========== NEXTAUTH MODELS ==========
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
