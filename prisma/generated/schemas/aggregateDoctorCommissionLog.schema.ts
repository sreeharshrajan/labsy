import type { Prisma } from '@prisma/client';
import { z } from 'zod';
import { DoctorCommissionLogOrderByWithRelationInputObjectSchema } from './objects/DoctorCommissionLogOrderByWithRelationInput.schema';
import { DoctorCommissionLogWhereInputObjectSchema } from './objects/DoctorCommissionLogWhereInput.schema';
import { DoctorCommissionLogWhereUniqueInputObjectSchema } from './objects/DoctorCommissionLogWhereUniqueInput.schema';
import { DoctorCommissionLogCountAggregateInputObjectSchema } from './objects/DoctorCommissionLogCountAggregateInput.schema';
import { DoctorCommissionLogMinAggregateInputObjectSchema } from './objects/DoctorCommissionLogMinAggregateInput.schema';
import { DoctorCommissionLogMaxAggregateInputObjectSchema } from './objects/DoctorCommissionLogMaxAggregateInput.schema';
import { DoctorCommissionLogAvgAggregateInputObjectSchema } from './objects/DoctorCommissionLogAvgAggregateInput.schema';
import { DoctorCommissionLogSumAggregateInputObjectSchema } from './objects/DoctorCommissionLogSumAggregateInput.schema';

export const DoctorCommissionLogAggregateSchema: z.ZodType<Prisma.DoctorCommissionLogAggregateArgs> = z.object({ orderBy: z.union([DoctorCommissionLogOrderByWithRelationInputObjectSchema, DoctorCommissionLogOrderByWithRelationInputObjectSchema.array()]).optional(), where: DoctorCommissionLogWhereInputObjectSchema.optional(), cursor: DoctorCommissionLogWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), DoctorCommissionLogCountAggregateInputObjectSchema ]).optional(), _min: DoctorCommissionLogMinAggregateInputObjectSchema.optional(), _max: DoctorCommissionLogMaxAggregateInputObjectSchema.optional(), _avg: DoctorCommissionLogAvgAggregateInputObjectSchema.optional(), _sum: DoctorCommissionLogSumAggregateInputObjectSchema.optional() }).strict() as unknown as z.ZodType<Prisma.DoctorCommissionLogAggregateArgs>;

export const DoctorCommissionLogAggregateZodSchema = z.object({ orderBy: z.union([DoctorCommissionLogOrderByWithRelationInputObjectSchema, DoctorCommissionLogOrderByWithRelationInputObjectSchema.array()]).optional(), where: DoctorCommissionLogWhereInputObjectSchema.optional(), cursor: DoctorCommissionLogWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), DoctorCommissionLogCountAggregateInputObjectSchema ]).optional(), _min: DoctorCommissionLogMinAggregateInputObjectSchema.optional(), _max: DoctorCommissionLogMaxAggregateInputObjectSchema.optional(), _avg: DoctorCommissionLogAvgAggregateInputObjectSchema.optional(), _sum: DoctorCommissionLogSumAggregateInputObjectSchema.optional() }).strict();