import type { Prisma } from '@prisma/client';
import { z } from 'zod';
import { DoctorCommissionWhereInputObjectSchema } from './objects/DoctorCommissionWhereInput.schema';
import { DoctorCommissionOrderByWithAggregationInputObjectSchema } from './objects/DoctorCommissionOrderByWithAggregationInput.schema';
import { DoctorCommissionScalarWhereWithAggregatesInputObjectSchema } from './objects/DoctorCommissionScalarWhereWithAggregatesInput.schema';
import { DoctorCommissionScalarFieldEnumSchema } from './enums/DoctorCommissionScalarFieldEnum.schema';
import { DoctorCommissionCountAggregateInputObjectSchema } from './objects/DoctorCommissionCountAggregateInput.schema';
import { DoctorCommissionMinAggregateInputObjectSchema } from './objects/DoctorCommissionMinAggregateInput.schema';
import { DoctorCommissionMaxAggregateInputObjectSchema } from './objects/DoctorCommissionMaxAggregateInput.schema';
import { DoctorCommissionAvgAggregateInputObjectSchema } from './objects/DoctorCommissionAvgAggregateInput.schema';
import { DoctorCommissionSumAggregateInputObjectSchema } from './objects/DoctorCommissionSumAggregateInput.schema';

export const DoctorCommissionGroupBySchema: z.ZodType<Prisma.DoctorCommissionGroupByArgs> = z.object({ where: DoctorCommissionWhereInputObjectSchema.optional(), orderBy: z.union([DoctorCommissionOrderByWithAggregationInputObjectSchema, DoctorCommissionOrderByWithAggregationInputObjectSchema.array()]).optional(), having: DoctorCommissionScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(DoctorCommissionScalarFieldEnumSchema), _count: z.union([ z.literal(true), DoctorCommissionCountAggregateInputObjectSchema ]).optional(), _min: DoctorCommissionMinAggregateInputObjectSchema.optional(), _max: DoctorCommissionMaxAggregateInputObjectSchema.optional(), _avg: DoctorCommissionAvgAggregateInputObjectSchema.optional(), _sum: DoctorCommissionSumAggregateInputObjectSchema.optional() }).strict() as unknown as z.ZodType<Prisma.DoctorCommissionGroupByArgs>;

export const DoctorCommissionGroupByZodSchema = z.object({ where: DoctorCommissionWhereInputObjectSchema.optional(), orderBy: z.union([DoctorCommissionOrderByWithAggregationInputObjectSchema, DoctorCommissionOrderByWithAggregationInputObjectSchema.array()]).optional(), having: DoctorCommissionScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(DoctorCommissionScalarFieldEnumSchema), _count: z.union([ z.literal(true), DoctorCommissionCountAggregateInputObjectSchema ]).optional(), _min: DoctorCommissionMinAggregateInputObjectSchema.optional(), _max: DoctorCommissionMaxAggregateInputObjectSchema.optional(), _avg: DoctorCommissionAvgAggregateInputObjectSchema.optional(), _sum: DoctorCommissionSumAggregateInputObjectSchema.optional() }).strict();