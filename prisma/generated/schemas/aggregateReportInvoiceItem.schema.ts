import type { Prisma } from '@prisma/client';
import { z } from 'zod';
import { ReportInvoiceItemOrderByWithRelationInputObjectSchema } from './objects/ReportInvoiceItemOrderByWithRelationInput.schema';
import { ReportInvoiceItemWhereInputObjectSchema } from './objects/ReportInvoiceItemWhereInput.schema';
import { ReportInvoiceItemWhereUniqueInputObjectSchema } from './objects/ReportInvoiceItemWhereUniqueInput.schema';
import { ReportInvoiceItemCountAggregateInputObjectSchema } from './objects/ReportInvoiceItemCountAggregateInput.schema';
import { ReportInvoiceItemMinAggregateInputObjectSchema } from './objects/ReportInvoiceItemMinAggregateInput.schema';
import { ReportInvoiceItemMaxAggregateInputObjectSchema } from './objects/ReportInvoiceItemMaxAggregateInput.schema';
import { ReportInvoiceItemAvgAggregateInputObjectSchema } from './objects/ReportInvoiceItemAvgAggregateInput.schema';
import { ReportInvoiceItemSumAggregateInputObjectSchema } from './objects/ReportInvoiceItemSumAggregateInput.schema';

export const ReportInvoiceItemAggregateSchema: z.ZodType<Prisma.ReportInvoiceItemAggregateArgs> = z.object({ orderBy: z.union([ReportInvoiceItemOrderByWithRelationInputObjectSchema, ReportInvoiceItemOrderByWithRelationInputObjectSchema.array()]).optional(), where: ReportInvoiceItemWhereInputObjectSchema.optional(), cursor: ReportInvoiceItemWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), ReportInvoiceItemCountAggregateInputObjectSchema ]).optional(), _min: ReportInvoiceItemMinAggregateInputObjectSchema.optional(), _max: ReportInvoiceItemMaxAggregateInputObjectSchema.optional(), _avg: ReportInvoiceItemAvgAggregateInputObjectSchema.optional(), _sum: ReportInvoiceItemSumAggregateInputObjectSchema.optional() }).strict() as unknown as z.ZodType<Prisma.ReportInvoiceItemAggregateArgs>;

export const ReportInvoiceItemAggregateZodSchema = z.object({ orderBy: z.union([ReportInvoiceItemOrderByWithRelationInputObjectSchema, ReportInvoiceItemOrderByWithRelationInputObjectSchema.array()]).optional(), where: ReportInvoiceItemWhereInputObjectSchema.optional(), cursor: ReportInvoiceItemWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), ReportInvoiceItemCountAggregateInputObjectSchema ]).optional(), _min: ReportInvoiceItemMinAggregateInputObjectSchema.optional(), _max: ReportInvoiceItemMaxAggregateInputObjectSchema.optional(), _avg: ReportInvoiceItemAvgAggregateInputObjectSchema.optional(), _sum: ReportInvoiceItemSumAggregateInputObjectSchema.optional() }).strict();