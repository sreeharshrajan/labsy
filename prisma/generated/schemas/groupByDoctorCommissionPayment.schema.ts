import type { Prisma } from '@prisma/client';
import { z } from 'zod';
import { DoctorCommissionPaymentWhereInputObjectSchema } from './objects/DoctorCommissionPaymentWhereInput.schema';
import { DoctorCommissionPaymentOrderByWithAggregationInputObjectSchema } from './objects/DoctorCommissionPaymentOrderByWithAggregationInput.schema';
import { DoctorCommissionPaymentScalarWhereWithAggregatesInputObjectSchema } from './objects/DoctorCommissionPaymentScalarWhereWithAggregatesInput.schema';
import { DoctorCommissionPaymentScalarFieldEnumSchema } from './enums/DoctorCommissionPaymentScalarFieldEnum.schema';
import { DoctorCommissionPaymentCountAggregateInputObjectSchema } from './objects/DoctorCommissionPaymentCountAggregateInput.schema';
import { DoctorCommissionPaymentMinAggregateInputObjectSchema } from './objects/DoctorCommissionPaymentMinAggregateInput.schema';
import { DoctorCommissionPaymentMaxAggregateInputObjectSchema } from './objects/DoctorCommissionPaymentMaxAggregateInput.schema';
import { DoctorCommissionPaymentAvgAggregateInputObjectSchema } from './objects/DoctorCommissionPaymentAvgAggregateInput.schema';
import { DoctorCommissionPaymentSumAggregateInputObjectSchema } from './objects/DoctorCommissionPaymentSumAggregateInput.schema';

export const DoctorCommissionPaymentGroupBySchema: z.ZodType<Prisma.DoctorCommissionPaymentGroupByArgs> = z.object({ where: DoctorCommissionPaymentWhereInputObjectSchema.optional(), orderBy: z.union([DoctorCommissionPaymentOrderByWithAggregationInputObjectSchema, DoctorCommissionPaymentOrderByWithAggregationInputObjectSchema.array()]).optional(), having: DoctorCommissionPaymentScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(DoctorCommissionPaymentScalarFieldEnumSchema), _count: z.union([ z.literal(true), DoctorCommissionPaymentCountAggregateInputObjectSchema ]).optional(), _min: DoctorCommissionPaymentMinAggregateInputObjectSchema.optional(), _max: DoctorCommissionPaymentMaxAggregateInputObjectSchema.optional(), _avg: DoctorCommissionPaymentAvgAggregateInputObjectSchema.optional(), _sum: DoctorCommissionPaymentSumAggregateInputObjectSchema.optional() }).strict() as unknown as z.ZodType<Prisma.DoctorCommissionPaymentGroupByArgs>;

export const DoctorCommissionPaymentGroupByZodSchema = z.object({ where: DoctorCommissionPaymentWhereInputObjectSchema.optional(), orderBy: z.union([DoctorCommissionPaymentOrderByWithAggregationInputObjectSchema, DoctorCommissionPaymentOrderByWithAggregationInputObjectSchema.array()]).optional(), having: DoctorCommissionPaymentScalarWhereWithAggregatesInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), by: z.array(DoctorCommissionPaymentScalarFieldEnumSchema), _count: z.union([ z.literal(true), DoctorCommissionPaymentCountAggregateInputObjectSchema ]).optional(), _min: DoctorCommissionPaymentMinAggregateInputObjectSchema.optional(), _max: DoctorCommissionPaymentMaxAggregateInputObjectSchema.optional(), _avg: DoctorCommissionPaymentAvgAggregateInputObjectSchema.optional(), _sum: DoctorCommissionPaymentSumAggregateInputObjectSchema.optional() }).strict();