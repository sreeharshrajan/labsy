import type { Prisma } from '@prisma/client';
import { z } from 'zod';
import { DoctorCommissionOrderByWithRelationInputObjectSchema } from './objects/DoctorCommissionOrderByWithRelationInput.schema';
import { DoctorCommissionWhereInputObjectSchema } from './objects/DoctorCommissionWhereInput.schema';
import { DoctorCommissionWhereUniqueInputObjectSchema } from './objects/DoctorCommissionWhereUniqueInput.schema';
import { DoctorCommissionCountAggregateInputObjectSchema } from './objects/DoctorCommissionCountAggregateInput.schema';
import { DoctorCommissionMinAggregateInputObjectSchema } from './objects/DoctorCommissionMinAggregateInput.schema';
import { DoctorCommissionMaxAggregateInputObjectSchema } from './objects/DoctorCommissionMaxAggregateInput.schema';
import { DoctorCommissionAvgAggregateInputObjectSchema } from './objects/DoctorCommissionAvgAggregateInput.schema';
import { DoctorCommissionSumAggregateInputObjectSchema } from './objects/DoctorCommissionSumAggregateInput.schema';

export const DoctorCommissionAggregateSchema: z.ZodType<Prisma.DoctorCommissionAggregateArgs> = z.object({ orderBy: z.union([DoctorCommissionOrderByWithRelationInputObjectSchema, DoctorCommissionOrderByWithRelationInputObjectSchema.array()]).optional(), where: DoctorCommissionWhereInputObjectSchema.optional(), cursor: DoctorCommissionWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), DoctorCommissionCountAggregateInputObjectSchema ]).optional(), _min: DoctorCommissionMinAggregateInputObjectSchema.optional(), _max: DoctorCommissionMaxAggregateInputObjectSchema.optional(), _avg: DoctorCommissionAvgAggregateInputObjectSchema.optional(), _sum: DoctorCommissionSumAggregateInputObjectSchema.optional() }).strict() as unknown as z.ZodType<Prisma.DoctorCommissionAggregateArgs>;

export const DoctorCommissionAggregateZodSchema = z.object({ orderBy: z.union([DoctorCommissionOrderByWithRelationInputObjectSchema, DoctorCommissionOrderByWithRelationInputObjectSchema.array()]).optional(), where: DoctorCommissionWhereInputObjectSchema.optional(), cursor: DoctorCommissionWhereUniqueInputObjectSchema.optional(), take: z.number().optional(), skip: z.number().optional(), _count: z.union([ z.literal(true), DoctorCommissionCountAggregateInputObjectSchema ]).optional(), _min: DoctorCommissionMinAggregateInputObjectSchema.optional(), _max: DoctorCommissionMaxAggregateInputObjectSchema.optional(), _avg: DoctorCommissionAvgAggregateInputObjectSchema.optional(), _sum: DoctorCommissionSumAggregateInputObjectSchema.optional() }).strict();